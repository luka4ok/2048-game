{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = Array.from({\n        length: 4\n    }, ()=>Array(4).fill(0))){\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = initialState;\n        this.state = this.cloneState(this.initialState);\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    generateRandomTile() {\n        const emptyTiles = this.getEmptyTiles();\n        if (emptyTiles.length === 0) return;\n        const [row, col] = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    getEmptyTiles() {\n        const emptyTiles = [];\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((tile, colIndex)=>{\n                if (tile === 0) emptyTiles.push([\n                    rowIndex,\n                    colIndex\n                ]);\n            });\n        });\n        return emptyTiles;\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return;\n        const originalState = this.cloneState(this.state);\n        this.state = this.processMove(direction);\n        if (!this.areStatesEqual(this.state, originalState)) {\n            this.generateRandomTile();\n            this.validateGameState();\n        }\n    }\n    processMove(direction) {\n        const moveRow = (row)=>{\n            const filteredRow = row.filter((n)=>n !== 0);\n            const combinedRow = [];\n            for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                combinedRow.push(filteredRow[i] * 2);\n                this.score += filteredRow[i] * 2;\n                i++;\n            } else combinedRow.push(filteredRow[i]);\n            return [\n                ...combinedRow,\n                ...Array(4 - combinedRow.length).fill(0)\n            ];\n        };\n        const processRows = (state, reverse = false)=>state.map((row)=>reverse ? moveRow(row.reverse()).reverse() : moveRow(row));\n        switch(direction){\n            case \"left\":\n                return processRows(this.state);\n            case \"right\":\n                return processRows(this.state, true);\n            case \"up\":\n                return this.rotateState(processRows(this.rotateState(this.state)));\n            case \"down\":\n                return this.rotateState(processRows(this.rotateState(this.state), true));\n            default:\n                return this.state;\n        }\n    }\n    validateGameState() {\n        if (this.state.flat().includes(2048)) this.status = \"win\";\n        else if (!this.hasEmptyCells() && !this.canCombine()) this.status = \"lose\";\n    }\n    hasEmptyCells() {\n        return this.state.some((row)=>row.includes(0));\n    }\n    canCombine() {\n        return this.state.some((row, rowIndex)=>row.some((current, colIndex)=>colIndex < 3 && current === row[colIndex + 1] || rowIndex < 3 && current === this.state[rowIndex + 1][colIndex]));\n    }\n    rotateState(state) {\n        return state[0].map((_, colIndex)=>state.map((row)=>{\n                return row[colIndex];\n            }));\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.generateRandomTile();\n            this.generateRandomTile();\n        }\n    }\n    restart() {\n        this.state = this.cloneState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    areStatesEqual(state1, state2) {\n        return state1.every((row, rowIndex)=>row.every((tile, colIndex)=>tile === state2[rowIndex][colIndex]));\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$tiles = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$winMessageElement = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessageElement = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$startMessageElement = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$hideMessages = ()=>{\n    $09e991522ca7e64e$var$winMessageElement.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessageElement.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startMessageElement.classList.add(\"hidden\");\n};\nconst $09e991522ca7e64e$var$handleKeydown = (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$updateGameField();\n    }\n};\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\nfunction $09e991522ca7e64e$var$updateGameField() {\n    const state = $09e991522ca7e64e$var$game.getState().flat();\n    $09e991522ca7e64e$var$tiles.forEach((cell, i)=>{\n        cell.className = \"field-cell\";\n        if (state[i]) {\n            cell.textContent = state[i];\n            cell.classList.add(`field-cell--${state[i]}`);\n        } else cell.textContent = \"\";\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    switch(statusGame){\n        case \"win\":\n            $09e991522ca7e64e$var$winMessageElement.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$loseMessageElement.classList.remove(\"hidden\");\n            break;\n        default:\n            $09e991522ca7e64e$var$winMessageElement.classList.add(\"hidden\");\n            $09e991522ca7e64e$var$loseMessageElement.classList.add(\"hidden\");\n            break;\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateGameField();\n    $09e991522ca7e64e$var$hideMessages();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n});\n\n\n//# sourceMappingURL=index.01501d46.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst tiles = document.querySelectorAll('.field-cell');\nconst startButton = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst winMessageElement = document.querySelector('.message-win');\nconst loseMessageElement = document.querySelector('.message-lose');\nconst startMessageElement = document.querySelector('.message-start');\n\nconst hideMessages = () => {\n  winMessageElement.classList.add('hidden');\n  loseMessageElement.classList.add('hidden');\n  startMessageElement.classList.add('hidden');\n};\n\nconst handleKeydown = (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateGameField();\n  }\n};\n\ndocument.addEventListener('keydown', handleKeydown);\n\nfunction updateGameField() {\n  const state = game.getState().flat();\n\n  tiles.forEach((cell, i) => {\n    cell.className = 'field-cell';\n\n    if (state[i]) {\n      cell.textContent = state[i];\n      cell.classList.add(`field-cell--${state[i]}`);\n    } else {\n      cell.textContent = '';\n    }\n  });\n\n  scoreElement.textContent = game.getScore();\n\n  const statusGame = game.getStatus();\n\n  switch (statusGame) {\n    case 'win':\n      winMessageElement.classList.remove('hidden');\n      break;\n    case 'lose':\n      loseMessageElement.classList.remove('hidden');\n      break;\n    default:\n      winMessageElement.classList.add('hidden');\n      loseMessageElement.classList.add('hidden');\n      break;\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('restart')) {\n    game.restart();\n  }\n\n  game.start();\n  updateGameField();\n  hideMessages();\n  startButton.textContent = 'Restart';\n  startButton.classList.add('restart');\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = Array.from({ length: 4 }, () => Array(4).fill(0)),\n  ) {\n    this.score = 0;\n    this.status = 'idle';\n    this.initialState = initialState;\n    this.state = this.cloneState(this.initialState);\n  }\n\n  cloneState(state) {\n    return state.map((row) => [...row]);\n  }\n\n  generateRandomTile() {\n    const emptyTiles = this.getEmptyTiles();\n\n    if (emptyTiles.length === 0) {\n      return;\n    }\n\n    const [row, col] =\n      emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  getEmptyTiles() {\n    const emptyTiles = [];\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((tile, colIndex) => {\n        if (tile === 0) {\n          emptyTiles.push([rowIndex, colIndex]);\n        }\n      });\n    });\n\n    return emptyTiles;\n  }\n\n  move(direction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const originalState = this.cloneState(this.state);\n\n    this.state = this.processMove(direction);\n\n    if (!this.areStatesEqual(this.state, originalState)) {\n      this.generateRandomTile();\n      this.validateGameState();\n    }\n  }\n\n  processMove(direction) {\n    const moveRow = (row) => {\n      const filteredRow = row.filter((n) => n !== 0);\n      const combinedRow = [];\n\n      for (let i = 0; i < filteredRow.length; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          combinedRow.push(filteredRow[i] * 2);\n          this.score += filteredRow[i] * 2;\n          i++;\n        } else {\n          combinedRow.push(filteredRow[i]);\n        }\n      }\n\n      return [...combinedRow, ...Array(4 - combinedRow.length).fill(0)];\n    };\n\n    const processRows = (state, reverse = false) =>\n      state.map((row) =>\n        reverse ? moveRow(row.reverse()).reverse() : moveRow(row));\n\n    switch (direction) {\n      case 'left':\n        return processRows(this.state);\n      case 'right':\n        return processRows(this.state, true);\n      case 'up':\n        return this.rotateState(processRows(this.rotateState(this.state)));\n      case 'down':\n        return this.rotateState(\n          processRows(this.rotateState(this.state), true),\n        );\n      default:\n        return this.state;\n    }\n  }\n\n  validateGameState() {\n    if (this.state.flat().includes(2048)) {\n      this.status = 'win';\n    } else if (!this.hasEmptyCells() && !this.canCombine()) {\n      this.status = 'lose';\n    }\n  }\n\n  hasEmptyCells() {\n    return this.state.some((row) => row.includes(0));\n  }\n\n  canCombine() {\n    return this.state.some((row, rowIndex) =>\n      row.some(\n        (current, colIndex) =>\n          (colIndex < 3 && current === row[colIndex + 1]) ||\n          (rowIndex < 3 && current === this.state[rowIndex + 1][colIndex]),\n      ));\n  }\n\n  rotateState(state) {\n    return state[0].map((_, colIndex) =>\n      state.map((row) => {\n        return row[colIndex];\n      }));\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.generateRandomTile();\n      this.generateRandomTile();\n    }\n  }\n\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  areStatesEqual(state1, state2) {\n    return state1.every((row, rowIndex) =>\n      row.every((tile, colIndex) => tile === state2[rowIndex][colIndex]));\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n  moveRight() {\n    this.move('right');\n  }\n  moveUp() {\n    this.move('up');\n  }\n  moveDown() {\n    this.move('down');\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","Array","from","length","fill","score","status","state","cloneState","map","row","generateRandomTile","emptyTiles","getEmptyTiles","col","Math","floor","random","forEach","rowIndex","tile","colIndex","push","move","direction","originalState","processMove","areStatesEqual","validateGameState","moveRow","filteredRow","filter","n","combinedRow","i","processRows","reverse","rotateState","flat","includes","hasEmptyCells","canCombine","some","current","_","start","restart","state1","state2","every","getScore","getState","getStatus","moveLeft","moveRight","moveUp","moveDown","$09e991522ca7e64e$var$tiles","document","querySelectorAll","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$winMessageElement","$09e991522ca7e64e$var$loseMessageElement","$09e991522ca7e64e$var$startMessageElement","$09e991522ca7e64e$var$hideMessages","classList","add","$09e991522ca7e64e$var$updateGameField","cell","className","textContent","remove","addEventListener","e","key","contains"],"version":3,"file":"index.01501d46.js.map"}